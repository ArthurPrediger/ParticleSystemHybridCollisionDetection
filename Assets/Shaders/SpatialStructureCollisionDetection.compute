// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SpatialStructureCollisionDetection
#pragma kernel SpatialStructureCollisionDetectionHybrid

//#define PERFORMANCE_BENCHMARK
//#define ACCURACY_BENCHMARK

#define FLOAT_MAX 1.0e38

struct BvhSphereNode
{
    float3 center;
    float radius;
    int childOrStartNegated;
    int childOrSize;
};

struct BvhTriangle
{
    float3 vertices[3];
};

RWStructuredBuffer<BvhSphereNode> bvh;
RWStructuredBuffer<int> bvhStack; // Stack to hold nodes to be visited
RWStructuredBuffer<int> bvhStackIndices; // Per-thread index for stack handling
RWStructuredBuffer<BvhTriangle> bvhTriangles;
RWStructuredBuffer<float3> particlesPos;
RWStructuredBuffer<float3> particlesVel;
//ConsumeStructuredBuffer<int> particlesWithoutDepthCollision;
RWStructuredBuffer<uint> particlesWithoutDepthCollision;
float3 gravity;
float particleRadius;
float particleBounciness;
float deltaTime;
uint maxStackSize;

#ifdef ACCURACY_BENCHMARK
    RWStructuredBuffer<int> numCollisions;
#endif

bool ParticleSphereIntersection(float3 partInitPos, float3 partEndPos, float3 partDir, BvhSphereNode node)
{    
    float radiusSum = particleRadius + node.radius;
    
    if (distance(partInitPos, node.center) < radiusSum)
        return true;
    
    float3 partToNode = node.center - partInitPos;
    float intoPartDir = dot(partToNode, partDir);
    
    float disc = (radiusSum * radiusSum) - (dot(partToNode, partToNode) - intoPartDir * intoPartDir);
    
    float3 collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
    
    if (disc < 0)
        return false;
    
    float d = sqrt(disc);
    collisionPoint = partInitPos + (intoPartDir - d) * partDir;
    
    if (distance(partInitPos, partEndPos) < distance(partInitPos, collisionPoint))
        return false;
    
    return true;
}

bool RayTriangleIntersection(float3 rayOrigin, float3 rayDir, float3 v0, float3 v1, float3 v2, out float3 collisionPoint)
{
    float3 v1v0 = v1 - v0;
    float3 v2v0 = v2 - v0;
    float3 rov0 = rayOrigin - v0;

#if 0
    // Cramer's rule for solcing p(t) = ro+t*rd = p(u,v) = vo + u*(v1-v0) + v*(v2-v1)
    float d = 1.0/determinant(mat3(v1v0, v2v0, -rd ));
    float u =   d*determinant(mat3(rov0, v2v0, -rd ));
    float v =   d*determinant(mat3(v1v0, rov0, -rd ));
    float t =   d*determinant(mat3(v1v0, v2v0, rov0));
#else
    // The four determinants above have lots of terms in common. Knowing the changing
    // the order of the columns/rows doesn't change the volume/determinant, and that
    // the volume is dot(cross(a,b,c)), we can precompute some common terms and reduce
    // it all to:
    float3 n = cross(v1v0, v2v0);
    float3 q = cross(rov0, rayDir);
    float d = 1.0 / dot(rayDir, n);
    float u = d * dot(-q, v2v0);
    float v = d * dot(q, v1v0);
    float t = d * dot(-n, rov0);
#endif    

    if (u < 0.0 || v < 0.0 || (u + v) > 1.0)
    {
        collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
        return false;
    }
    
    collisionPoint = rayOrigin + (t * rayDir);
    
    return true;
}

bool RayCylinderIntersection(float3 rayOrigin, float3 rayDir, float3 bottomBase, float3 topBase, float radius, out float3 collisionPoint)
{
    float3 ba = topBase - bottomBase;
    float3 oc = rayOrigin - bottomBase;

    float baba = dot(ba, ba);
    float bard = dot(ba, rayDir);
    float baoc = dot(ba, oc);
    
    float k2 = baba - bard * bard;
    float k1 = baba * dot(oc, rayDir) - baoc * bard;
    float k0 = baba * dot(oc, oc) - baoc * baoc - radius * radius * baba;
    
    float h = k1 * k1 - k2 * k0;
    if (h < 0.0)
        return false;
    h = sqrt(h);
    float t = (-k1 - h) / k2;

    // body
    float y = baoc + t * bard;
    if (y > 0.0 && y < baba)
    {
        //vec4(t, (oc + t * radius - ba * y / baba) / radius);
        collisionPoint = rayOrigin + t * rayDir;
        return true;
    }
    
    // caps
    t = (((y < 0.0) ? 0.0 : baba) - baoc) / bard;
    if (abs(k1 + k2 * t) < h)
    {
        //vec4(t, ba * sign(y) / sqrt(baba));
        collisionPoint = rayOrigin + t * rayDir;
        return true;
    }

    collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
    return false;
}

bool RaySphereIntersection(float3 rayOrigin, float3 rayDir, float3 center, float radius, out float3 collisionPoint)
{
    float3 rayToSphere = center - rayOrigin;
    float intoRayDir = dot(rayToSphere, rayDir);
    
    float disc = (radius * radius) - (dot(rayToSphere, rayToSphere) - intoRayDir * intoRayDir);
    
    if (disc < 0)
    {
        collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
        return false;
    }
    
    float d = sqrt(disc);
    collisionPoint = rayOrigin + (intoRayDir - d) * rayDir;
    
    return true;
}

bool ParticleTriangleIntersection(float3 partInitPos, float3 partEndPos, float3 particleDir, BvhTriangle tri, out float3 collisionPoint)
{
    bool rayIntersected = false;
    collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
    float3 curCollisionPoint = float3(1, 1, 1) * FLOAT_MAX;
    
    float3 triNormal = normalize(cross((tri.vertices[1] - tri.vertices[0]), (tri.vertices[2] - tri.vertices[0])));
    
    if (dot(triNormal, particleDir) > 0)
        triNormal = -triNormal;
    
    float3 triOffset = triNormal * particleRadius;
    
    float3 v0 = tri.vertices[0] + triOffset, v1 = tri.vertices[1] + triOffset, v2 = tri.vertices[2] + triOffset;
    
    if (RayTriangleIntersection(partInitPos, particleDir, v0, v1, v2, curCollisionPoint))
    {
        rayIntersected = true;
        float3 diffInitCurCol = partInitPos - curCollisionPoint;
        float3 diffInitPrevCol = partInitPos - collisionPoint;

        if (dot(diffInitCurCol, diffInitCurCol) < dot(diffInitPrevCol, diffInitPrevCol))
            collisionPoint = curCollisionPoint;
    }
    
    v0 = tri.vertices[0] - triOffset, v1 = tri.vertices[1] - triOffset, v2 = tri.vertices[2] - triOffset;
    
    if (RayTriangleIntersection(partInitPos, particleDir, v0, v1, v2, curCollisionPoint))
    {
        rayIntersected = true;
        float3 diffInitCurCol = partInitPos - curCollisionPoint;
        float3 diffInitPrevCol = partInitPos - collisionPoint;

        if (dot(diffInitCurCol, diffInitCurCol) < dot(diffInitPrevCol, diffInitPrevCol))
            collisionPoint = curCollisionPoint;
    }
    
    for (uint i = 0; i < 3; i++)
    {
        if (RayCylinderIntersection(partInitPos, particleDir, tri.vertices[i], tri.vertices[(i + 1) % 3], particleRadius, curCollisionPoint))
        {
            rayIntersected = true;
            float3 diffInitCurCol = partInitPos - curCollisionPoint;
            float3 diffInitPrevCol = partInitPos - collisionPoint;

            if (dot(diffInitCurCol, diffInitCurCol) < dot(diffInitPrevCol, diffInitPrevCol))
                collisionPoint = curCollisionPoint;
        }
    }
    
    for (uint j = 0; j < 3; j++)
    {
        if (RaySphereIntersection(partInitPos, particleDir, tri.vertices[j], particleRadius, curCollisionPoint))
        {
            rayIntersected = true;
            float3 diffInitCurCol = partInitPos - curCollisionPoint;
            float3 diffInitPrevCol = partInitPos - collisionPoint;

            if (dot(diffInitCurCol, diffInitCurCol) < dot(diffInitPrevCol, diffInitPrevCol))
                collisionPoint = curCollisionPoint;
        }
    }
    
    float3 diffInitCol = partInitPos - collisionPoint;
    float3 diffInitEnd = partInitPos - partEndPos;

    if (dot(diffInitCol, diffInitCol) > dot(diffInitEnd, diffInitEnd))
        rayIntersected = false;
        
    return rayIntersected;
}

void TraverseVolumeStructureForCollisionDetection(uint particleIndex, uint3 id)
{
    if (dot(particlesVel[particleIndex], particlesVel[particleIndex]) == 0.0)
        return;
    
    uint threadId = id.x;
    uint stackBase = threadId * maxStackSize;
    
    bvhStackIndices[threadId] = 0;
    bvhStack[stackBase + bvhStackIndices[threadId]++] = 0; // Push root node onto stack
    
    float3 partInitPos = particlesPos[particleIndex];
    float3 partEndPos = particlesPos[particleIndex] + particlesVel[particleIndex] * deltaTime;
    float3 partVel = particlesVel[particleIndex];
    float3 partDir = normalize(particlesVel[particleIndex]);
    
    while (bvhStackIndices[threadId] > 0)
    {
        int nodeIndex = bvhStack[stackBase + --bvhStackIndices[threadId]];
        BvhSphereNode node = bvh[nodeIndex];
        
        if (ParticleSphereIntersection(partInitPos, partEndPos, partDir, node))
        {            
            if (node.childOrStartNegated > 0)
            {
                BvhSphereNode child0 = bvh[node.childOrStartNegated];
                BvhSphereNode child1 = bvh[node.childOrSize];
                
                float3 partToChild0 = child0.center - partInitPos;
                float3 partToChild1 = child1.center - partInitPos;
                
                // Push children onto the stack
                if (dot(partDir, partToChild0) < dot(partDir, partToChild1))
                {
                    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrSize;
                    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrStartNegated;
                }
                else
                {
                    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrStartNegated;
                    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrSize;
                }
                //float3 collisionPointChild0;
                //float3 collisionPointChild1;
                //bool child0Intersected = ParticleSphereIntersection(partInitPos, partEndPos, partDir, child0, collisionPointChild0);
                //bool child1Intersected = ParticleSphereIntersection(partInitPos, partEndPos, partDir, child1, collisionPointChild1);
                
                //if(child0Intersected && child1Intersected)
                //{
                //    float3 diffInitChild0 = partInitPos - collisionPointChild0;
                //    float3 diffInitChild1 = partInitPos - collisionPointChild1;
                    
                //    if (dot(diffInitChild0, diffInitChild0) > dot(diffInitChild1, diffInitChild1))
                //    {
                //        bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrSize;
                //        bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrStartNegated;
                //    }
                //    else
                //    {
                //        bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrStartNegated;
                //        bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrSize;
                //    }
                //}
                //else if (child0Intersected)
                //{
                //    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrStartNegated;
                //}
                //else if (child1Intersected)
                //{
                //    bvhStack[stackBase + bvhStackIndices[threadId]++] = node.childOrSize;
                //}
            }
            else
            {   
                BvhTriangle collisionTri;
                float3 collisionPoint = float3(1, 1, 1) * FLOAT_MAX;
                bool collided = false;
                
                for (int i = 0; i < node.childOrSize; i++)
                {
                    BvhTriangle tri = bvhTriangles[-node.childOrStartNegated + i];
                    float3 curCollisionPoint = float3(1, 1, 1) * FLOAT_MAX;
                    
                    if (ParticleTriangleIntersection(partInitPos, partEndPos, partDir, tri, curCollisionPoint))
                    {
                        float3 diffInitCurCol = partInitPos - curCollisionPoint;
                        float3 diffInitPrevCol = partInitPos - collisionPoint;

                        if (dot(diffInitCurCol, diffInitCurCol) < dot(diffInitPrevCol, diffInitPrevCol))
                        {
                            collisionPoint = curCollisionPoint;
                            collisionTri = tri;
                            collided = true;
                        }                     
                    }
                }
                
                if (collided)
                {
                    float3 triNormal = normalize(cross(
                        (collisionTri.vertices[1] - collisionTri.vertices[0]),
                        (collisionTri.vertices[2] - collisionTri.vertices[0])));

                    if (dot(triNormal, partDir) > 0.0)
                        triNormal = -triNormal;
                    
                    float3 reflectedDir = normalize(reflect(partDir, triNormal));
                    float collisionToEndDist = length(partEndPos - collisionPoint);
                    
                    particlesVel[particleIndex] = reflectedDir * (particleBounciness * length(partVel)) - (gravity * deltaTime);
                    particlesPos[particleIndex] = collisionPoint - partDir * (0.0015 * particleRadius) + reflectedDir * (collisionToEndDist * particleBounciness);
                    
#ifdef ACCURACY_BENCHMARK
                    numCollisions[threadId]++;
#endif
                    
                    break;
                }
            }
        }
    }
}

[numthreads(32, 1, 1)]
void SpatialStructureCollisionDetection(uint3 id : SV_DispatchThreadID)
{
    TraverseVolumeStructureForCollisionDetection(id.x, id);
}

[numthreads(32, 1, 1)]
void SpatialStructureCollisionDetectionHybrid(uint3 id : SV_DispatchThreadID)
{
    //int particleIndex = particlesWithoutDepthCollision.Consume();
    int particleIndex = particlesWithoutDepthCollision[id.x];
    
    TraverseVolumeStructureForCollisionDetection(particleIndex, id);
}