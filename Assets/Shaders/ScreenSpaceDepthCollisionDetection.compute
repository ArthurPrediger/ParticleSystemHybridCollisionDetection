// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ScreenSpaceDepthCollisionDetection
#pragma kernel ScreenSpaceDepthCollisionDetectionHybrid

//#define PERFORMANCE_BENCHMARK
//#define ACCURACY_BENCHMARK

RWStructuredBuffer<float3> particlesPos;
RWStructuredBuffer<float3> particlesVel;
//AppendStructuredBuffer<int> particlesWithoutDepthCollision;
RWStructuredBuffer<uint> particlesWithoutDepthCollision;
RWStructuredBuffer<uint> numParticlesWithoutDepthCollision : register(u0);
matrix projectionMat;
matrix viewMat;
float3 cameraPos;
float3 cameraForward;
float3 gravity;
float2 screenSize;
float particleRadius;
float particleBounciness;
float deltaTime;

RWTexture2D<float> depthTexture;
RWTexture2D<float4> normalTexture;

#ifdef ACCURACY_BENCHMARK
    RWStructuredBuffer<int> numCollisions;
#endif

[numthreads(32, 1, 1)]
void ScreenSpaceDepthCollisionDetection(uint3 id : SV_DispatchThreadID)
{
    if (dot(particlesVel[id.x], particlesVel[id.x]) == 0.0)
        return;
    
    float3 particlePos = particlesPos[id.x];
    float3 particleVel = particlesVel[id.x];

    float4 viewPos = mul(viewMat, float4(particlePos, 1.0));

    float4 clipPos = mul(projectionMat, viewPos);

    float3 ndcPos = clipPos.xyz / clipPos.w;

    float2 screenPos;
    screenPos.x = (ndcPos.x * 0.5 + 0.5);
    screenPos.y = (ndcPos.y * 0.5 + 0.5);

    bool isInsideScreen = (screenPos.x >= 0 && screenPos.x <= 1.0) && (screenPos.y >= 0 && screenPos.y <= 1.0);
    
    if (isInsideScreen && dot(cameraForward, (particlePos - cameraPos)) > 0.0)
    {
        screenPos *= screenSize;
        float depth = depthTexture.Load(int3(screenPos, 0));

        float eyeToParticleDist = length(particlePos - cameraPos);
        float distDifference = abs(eyeToParticleDist - depth);
        
        float3 surfaceNormal = normalTexture.Load(int3(screenPos, 0)).xyz;

        bool intoSurface = dot(surfaceNormal, particleVel) < 0.0;
        
        if ((distDifference <= particleRadius) && intoSurface)
        {
            float3 particleDir = normalize(particleVel);
            float3 reflectedDir = normalize(reflect(particleDir, surfaceNormal));
            
            particlesVel[id.x] = reflectedDir * (particleBounciness * length(particleVel)) - (gravity * deltaTime);
            particlesPos[id.x] += particlesVel[id.x] * deltaTime - (particleVel * deltaTime);
          
#ifdef ACCURACY_BENCHMARK
            numCollisions[id.x]++;
#endif
        }
    }
}

void AddParticleWithoutDepthCollision(int particleIndex)
{
    //particlesWithoutDepthCollision.Append(particleIndex);
    uint originalValue;
    InterlockedAdd(numParticlesWithoutDepthCollision[0], 1, originalValue);
    particlesWithoutDepthCollision[originalValue] = particleIndex;
}

[numthreads(32, 1, 1)]
void ScreenSpaceDepthCollisionDetectionHybrid(uint3 id : SV_DispatchThreadID)
{
    if (dot(particlesVel[id.x], particlesVel[id.x]) == 0.0)
        return;
    
    float3 particlePos = particlesPos[id.x];
    float3 particleVel = particlesVel[id.x];

    float4 viewPos = mul(viewMat, float4(particlePos, 1.0));

    float4 clipPos = mul(projectionMat, viewPos);

    float3 ndcPos = clipPos.xyz / clipPos.w;

    float2 screenPos;
    screenPos.x = (ndcPos.x * 0.5 + 0.5);
    screenPos.y = (ndcPos.y * 0.5 + 0.5);

    bool isInsideScreen = (screenPos.x >= 0 && screenPos.x <= 1.0) && (screenPos.y >= 0 && screenPos.y <= 1.0);

    if (isInsideScreen && dot(cameraForward, (particlePos - cameraPos)) > 0.0)
    {
        screenPos *= screenSize;
        float depth = depthTexture.Load(int3(screenPos, 0));

        float eyeToParticleDist = length(particlePos - cameraPos);
        float distDifference = abs(eyeToParticleDist - depth);
        
        float3 surfaceNormal = normalTexture.Load(int3(screenPos, 0)).xyz;

        bool intoSurface = dot(surfaceNormal, particleVel) < 0.0;

        if (distDifference <= particleRadius)
        {
            if (intoSurface)
            {
                float3 particleDir = normalize(particleVel);
                float3 reflectedDir = normalize(reflect(particleDir, surfaceNormal));
            
                particlesVel[id.x] = reflectedDir * (particleBounciness * length(particleVel)) - (gravity * deltaTime);
                particlesPos[id.x] += particlesVel[id.x] * deltaTime - (particleVel * deltaTime);
            
#ifdef ACCURACY_BENCHMARK
                numCollisions[id.x]++;
#endif
            }
        }
        else if (eyeToParticleDist > depth)
        {
            AddParticleWithoutDepthCollision(id.x);
        }
    }
    else
    {
        AddParticleWithoutDepthCollision(id.x);
    }
}

//[numthreads(32, 1, 1)]
//void PSScreenSpaceCollisionDetection(uint3 id : SV_DispatchThreadID)
//{
//    float3 particlePos = particlesPos[id.x];
//    float3 particleVel = particlesVel[id.x];

//    float4 viewPos = mul(viewMat, float4(particlePos, 1.0));

//    float4 clipPos = mul(projectionMat, viewPos);

//    float3 ndcPos = clipPos.xyz / clipPos.w;

//    float2 screenPos;
//    screenPos.x = (ndcPos.x * 0.5 + 0.5);
//    screenPos.y = (ndcPos.y * 0.5 + 0.5);

//    bool isInsideScreen = (screenPos.x >= 0 && screenPos.x <= 1.0) && (screenPos.y >= 0 && screenPos.y <= 1.0);

//    if (isInsideScreen && dot(cameraForward, (particlePos - cameraPos)) > 0.0)
//    {
//        screenPos *= screenSize;
//        float depth = depthTexture.Load(int3(screenPos, 0));
         
//        float distDifference = abs(depth - viewPos.z);
        
//        float3 surfaceNormal = normalTexture.Load(int3(screenPos, 0)).xyz;

//        bool intoSurface = dot(surfaceNormal, particleVel) < 0.0;
        
//        if (distDifference <= particleRadius && intoSurface)
//        {
//            float3 particleDir = normalize(particleVel);
//            float3 reflectedDir = normalize(reflect(particleDir, surfaceNormal));
//            const float gravity = -9.81;
            
//            //particlesPos[id.x] += float3(0, -1.0, 0) * (gravity * deltaTime);
//            //particlesPos[id.x] -= particleVel * (2 * deltaTime);
//            //particlesPos[id.x] -= particleVel * deltaTime;
//            //particlesPos[id.x] -= moveBack * particleDir;
//            particlesPos[id.x] -= (particleVel * deltaTime);
//            particlesVel[id.x] = reflectedDir * (particleBounciness * length(particleVel)) + float3(0, -1.0, 0) * (gravity * deltaTime);
          
//#ifdef ACCURACY_BENCHMARK
//            numCollisions[id.x]++;
//#endif
//        }
//    }
//}